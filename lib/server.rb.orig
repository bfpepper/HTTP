<<<<<<< HEAD
require_relative 'parser'
=======
#Move controller and connect to server.rb
#get debugger to work with Hello world
require './lib/parser'
require './lib/controller'
>>>>>>> 5e50ac2be721ec0d8c8f2684ff6da6c3f500ed83
require 'socket'
require 'timeout'
require 'pry'
#this receives all the input from other files.

class Server

<<<<<<< HEAD

  tcp_server = TCPServer.new(9292)
  client = tcp_server.accept

  all_count = 0
=======
  #add loop to Server
  # tcp_server = TCPServer.new(9292)
  # client = tcp_server.accept
>>>>>>> 5e50ac2be721ec0d8c8f2684ff6da6c3f500ed83
  timeout_in_seconds = 4
  parser = Parser.new
  while tcp_server.listen(1)
<<<<<<< HEAD
    Timeout::timeout(timeout_in_seconds) do
      puts "Ready for a request"
      request_lines = []
      while line = client.gets and !line.chomp.empty?
        request_lines << line.chomp
      end
      p=Parser.new(request_lines)

      #puts "Got this request:"
      #puts request_lines.inspect

      puts "Sending response."
      response = "<pre>#{p.hello_world}\n #{p.verb}\n#{p.path}\n#{p.protocol}\n#{p.host}\n#{p.port}\n#{p.origin}\n#{p.accept}</pre>"
      output = "<html><head></head><body>#{response}</body></html>"
      headers = ["http/1.1 200 ok",
        "date: #{Time.now.strftime('%a, %e %b %Y %H:%M:%S %z')}",
        "server: ruby",
        "content-type: text/html; charset=iso-8859-1",
        "content-length: #{output.length}\r\n\r\n"].join("\r\n")
        client.puts headers
        client.puts output

        puts ["Wrote this response:", headers, output].join("\n")

        all_count += 1
        puts "\nResponse complete, exiting."

      end

=======
    #Timeout::timeout(timeout_in_seconds) do
      #puts "Ready for a request"
      # request_lines = []
      # while line = client.gets and !line.chomp.empty?
      #   request_lines << line.chomp
      # end
      parser.route(request_lines)
      #puts "Got this request:"
      #puts request_lines.inspect
>>>>>>> 5e50ac2be721ec0d8c8f2684ff6da6c3f500ed83
    end

  end

end
